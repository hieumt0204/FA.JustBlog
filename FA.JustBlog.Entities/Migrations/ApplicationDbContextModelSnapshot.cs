// <auto-generated />
using System;
using FA.JustBlog.Entities.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FA.JustBlog.Entities.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("FA.JustBlog.Entities.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"), 1L, 1);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<DateTime>("Modify")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UrlSlug")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryName = "Science",
                            CreateAt = new DateTime(2023, 12, 15, 9, 44, 55, 325, DateTimeKind.Local).AddTicks(833),
                            Description = "Delecius",
                            Modify = new DateTime(2023, 12, 15, 9, 44, 55, 325, DateTimeKind.Local).AddTicks(834),
                            Status = 1,
                            UrlSlug = "#"
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryName = "Social",
                            CreateAt = new DateTime(2023, 12, 15, 9, 44, 55, 325, DateTimeKind.Local).AddTicks(836),
                            Description = "Delecius",
                            Modify = new DateTime(2023, 12, 15, 9, 44, 55, 325, DateTimeKind.Local).AddTicks(837),
                            Status = 1,
                            UrlSlug = "#"
                        },
                        new
                        {
                            CategoryId = 3,
                            CategoryName = "Culture",
                            CreateAt = new DateTime(2023, 12, 15, 9, 44, 55, 325, DateTimeKind.Local).AddTicks(838),
                            Description = "Not good",
                            Modify = new DateTime(2023, 12, 15, 9, 44, 55, 325, DateTimeKind.Local).AddTicks(838),
                            Status = 1,
                            UrlSlug = "#"
                        },
                        new
                        {
                            CategoryId = 4,
                            CategoryName = "Travel",
                            CreateAt = new DateTime(2023, 12, 15, 9, 44, 55, 325, DateTimeKind.Local).AddTicks(839),
                            Description = "Delecius",
                            Modify = new DateTime(2023, 12, 15, 9, 44, 55, 325, DateTimeKind.Local).AddTicks(840),
                            Status = 1,
                            UrlSlug = "#"
                        });
                });

            modelBuilder.Entity("FA.JustBlog.Entities.Models.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"), 1L, 1);

                    b.Property<string>("CommentHeader")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CommentTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.HasKey("CommentId");

                    b.HasIndex("PostId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            CommentId = 1,
                            CommentHeader = "None",
                            CommentText = "None",
                            CommentTime = new DateTime(2015, 12, 25, 1, 3, 12, 0, DateTimeKind.Unspecified),
                            Email = "Andreww@gmail.com",
                            Name = "Adnreww",
                            PostId = 1
                        },
                        new
                        {
                            CommentId = 2,
                            CommentHeader = "None",
                            CommentText = "None",
                            CommentTime = new DateTime(2015, 12, 25, 1, 3, 12, 0, DateTimeKind.Unspecified),
                            Email = "Andreww@gmail.com",
                            Name = "baoson",
                            PostId = 1
                        },
                        new
                        {
                            CommentId = 13,
                            CommentHeader = "None",
                            CommentText = "None",
                            CommentTime = new DateTime(2015, 12, 25, 1, 3, 12, 0, DateTimeKind.Unspecified),
                            Email = "Andreww@gmail.com",
                            Name = "thuyen",
                            PostId = 1
                        });
                });

            modelBuilder.Entity("FA.JustBlog.Entities.Models.LocalUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PassWord")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LocalUsers");
                });

            modelBuilder.Entity("FA.JustBlog.Entities.Models.Post", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PostId"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Modify")
                        .HasColumnType("datetime2");

                    b.Property<string>("PostContent")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("PostOn")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Published")
                        .HasColumnType("bit");

                    b.Property<int?>("RateCount")
                        .HasColumnType("int");

                    b.Property<string>("ShortDecription")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TotalRate")
                        .HasColumnType("int");

                    b.Property<string>("UrlSlug")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ViewCount")
                        .HasColumnType("int");

                    b.HasKey("PostId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            PostId = 1,
                            CategoryId = 1,
                            CreateAt = new DateTime(2023, 12, 15, 9, 44, 55, 325, DateTimeKind.Local).AddTicks(730),
                            Modify = new DateTime(2023, 12, 15, 9, 44, 55, 325, DateTimeKind.Local).AddTicks(722),
                            PostContent = "Post content",
                            PostOn = new DateTime(2012, 12, 25, 1, 3, 12, 0, DateTimeKind.Unspecified),
                            Published = true,
                            ShortDecription = "mot",
                            Status = 1,
                            Title = "Title 1",
                            UrlSlug = "Url1"
                        },
                        new
                        {
                            PostId = 2,
                            CategoryId = 1,
                            CreateAt = new DateTime(2023, 12, 15, 9, 44, 55, 325, DateTimeKind.Local).AddTicks(734),
                            Modify = new DateTime(2023, 12, 15, 9, 44, 55, 325, DateTimeKind.Local).AddTicks(733),
                            PostContent = "employee",
                            PostOn = new DateTime(2021, 12, 25, 1, 3, 12, 0, DateTimeKind.Unspecified),
                            Published = true,
                            ShortDecription = "hai",
                            Status = 1,
                            Title = "Title 2",
                            UrlSlug = "Url12"
                        },
                        new
                        {
                            PostId = 3,
                            CategoryId = 2,
                            CreateAt = new DateTime(2023, 12, 15, 9, 44, 55, 325, DateTimeKind.Local).AddTicks(737),
                            Modify = new DateTime(2023, 12, 15, 9, 44, 55, 325, DateTimeKind.Local).AddTicks(736),
                            PostContent = "Name",
                            PostOn = new DateTime(2020, 12, 25, 1, 3, 12, 0, DateTimeKind.Unspecified),
                            Published = true,
                            ShortDecription = "ba",
                            Status = 1,
                            Title = "Title 3",
                            UrlSlug = "Url3"
                        },
                        new
                        {
                            PostId = 4,
                            CategoryId = 2,
                            CreateAt = new DateTime(2023, 12, 15, 9, 44, 55, 325, DateTimeKind.Local).AddTicks(739),
                            Modify = new DateTime(2023, 12, 15, 9, 44, 55, 325, DateTimeKind.Local).AddTicks(738),
                            PostContent = "gae",
                            PostOn = new DateTime(2016, 12, 25, 1, 3, 12, 0, DateTimeKind.Unspecified),
                            Published = false,
                            ShortDecription = "bon",
                            Status = 1,
                            Title = "Title 4",
                            UrlSlug = "Url4"
                        },
                        new
                        {
                            PostId = 5,
                            CategoryId = 1,
                            CreateAt = new DateTime(2023, 12, 15, 9, 44, 55, 325, DateTimeKind.Local).AddTicks(741),
                            Modify = new DateTime(2023, 12, 15, 9, 44, 55, 325, DateTimeKind.Local).AddTicks(740),
                            PostContent = "Car",
                            PostOn = new DateTime(2015, 12, 25, 1, 3, 12, 0, DateTimeKind.Unspecified),
                            Published = true,
                            ShortDecription = "nam",
                            Status = 1,
                            Title = "Title 5",
                            UrlSlug = "Url5"
                        });
                });

            modelBuilder.Entity("FA.JustBlog.Entities.Models.PostTagMap", b =>
                {
                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.HasKey("TagId", "PostId");

                    b.HasIndex("PostId");

                    b.ToTable("PostTagMaps");

                    b.HasData(
                        new
                        {
                            TagId = 1,
                            PostId = 1
                        },
                        new
                        {
                            TagId = 1,
                            PostId = 2
                        },
                        new
                        {
                            TagId = 1,
                            PostId = 3
                        },
                        new
                        {
                            TagId = 2,
                            PostId = 1
                        },
                        new
                        {
                            TagId = 3,
                            PostId = 1
                        });
                });

            modelBuilder.Entity("FA.JustBlog.Entities.Models.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TagId"), 1L, 1);

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<DateTime>("Modify")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UrlSlug")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TagId");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            TagId = 1,
                            Count = 1,
                            CreateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "None",
                            Modify = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Bao Son",
                            Status = 0,
                            UrlSlug = "Tag/what-is-a-url-slug1"
                        },
                        new
                        {
                            TagId = 2,
                            Count = 2,
                            CreateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Description",
                            Modify = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Andreww",
                            Status = 0,
                            UrlSlug = "Tag/what-is-a-url-slug2"
                        },
                        new
                        {
                            TagId = 3,
                            Count = 2,
                            CreateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Description 1",
                            Modify = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Nam",
                            Status = 0,
                            UrlSlug = "Tag/what-is-a-url-slug3"
                        },
                        new
                        {
                            TagId = 4,
                            Count = 2,
                            CreateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Description 3",
                            Modify = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Nhung",
                            Status = 0,
                            UrlSlug = "Tag/what-is-a-url-slug3"
                        });
                });

            modelBuilder.Entity("FA.JustBlog.Entities.Models.Comment", b =>
                {
                    b.HasOne("FA.JustBlog.Entities.Models.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("FA.JustBlog.Entities.Models.Post", b =>
                {
                    b.HasOne("FA.JustBlog.Entities.Models.Category", "Category")
                        .WithMany("Posts")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("FA.JustBlog.Entities.Models.PostTagMap", b =>
                {
                    b.HasOne("FA.JustBlog.Entities.Models.Post", "Post")
                        .WithMany("PostTagMaps")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FA.JustBlog.Entities.Models.Tag", "Tag")
                        .WithMany("PostTagMaps")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("FA.JustBlog.Entities.Models.Category", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("FA.JustBlog.Entities.Models.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("PostTagMaps");
                });

            modelBuilder.Entity("FA.JustBlog.Entities.Models.Tag", b =>
                {
                    b.Navigation("PostTagMaps");
                });
#pragma warning restore 612, 618
        }
    }
}
